# add our path and macros to cmake module path
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
include (Common)
##############################################################################
# External libraries
##############################################################################


##############################################################################
# Boost
##############################################################################
SET(Boost_ADDITIONAL_VERSIONS "1.58" )
FIND_PACKAGE(Boost)
IF(NOT Boost_FOUND)
	message (FATAL_ERROR "Boost not found.")
ENDIF()

include_directories(${Boost_INCLUDE_DIRS})
include_directories(${Boost_INCLUDE_LIB_DIRS})
#basic definitions
add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})

##############################################################################
# OpenMP
##############################################################################
# disable openmp if using with intel mkl_rt.lib.
# if linking to four mkl layer libs, then openmp is ok.
find_package(OpenMP)
IF(OPENMP_FOUND)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	add_definitions(-DUSE_OPENMP)
ELSE()
	set (OPENMP_NOTFOUND 1)
ENDIF()

##############################################################################
# Complier Setting
##############################################################################
# only use C++11 and higher compiler
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++1y" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y")
#elseif(COMPILER_SUPPORTS_CXX0X)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11  \
		support. Please use a different C++ compiler.")
ENDIF()
# more cxx flags
option(no_warning_for_no_symbols ON)
# for unix
IF(UNIX)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-write-strings")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ltcmalloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-malloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-calloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-realloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-free")
ENDIF(UNIX)
# Turn off warnings
IF(WIN32)
add_definitions(-wd4018 -wd4267 -wd4101)
add_definitions(-wd4190 -wd4244 -wd4305 -wd4099)
ENDIF(WIN32)

# in case cmake cannot detact that it's a CXX project
#set_target_properties(project_name PROPERTIES LINKER_LANGUAGE CXX)

##############################################################################
# Add special directory of files  cannot be generally added previously
##############################################################################
FILE (GLOB PCHFiles "${CMAKE_SOURCE_DIR}/stdafx.*")
source_group ("Precompiled Headers" FILES ${PCHFiles})


##############################################################################
# Common includes
##############################################################################

# mysql
IF(UNIX)
include_directories( /usr/include/mysql/ )
ENDIF(UNIX)


##############################################################################
# Eigen
##############################################################################
#find_package (Eigen3 REQUIRED 3.0.0)
#IF(NOT EIGEN3_INCLUDE_DIR)
#  message (FATAL_ERROR "Eigen3 not found!")
#ENDIF ()
#include_directories(${EIGEN3_INCLUDE_DIR})
#add_definitions(${EIGEN3_DEFINITIONS})

##############################################################################
# SuiteSparse
##############################################################################
#find_package (SuiteSparse)
#IF(NOT SuiteSparse_FOUND )
#  message (FATAL_ERROR "SuiteSparse not found!")
#ENDIF ()
#include_directories(${SuiteSparse_INCLUDE_DIR})


##############################################################################
# CoMISo
##############################################################################
#set (CoMISo_DIR
#  ${CMAKE_SOURCE_DIR}/CoMISo/Solver
#  ${CMAKE_SOURCE_DIR}/CoMISo/NSolver
#  ${CMAKE_SOURCE_DIR}/CoMISo/EigenSolver
#  ${CMAKE_SOURCE_DIR}/CoMISo/Config
#  ${CMAKE_SOURCE_DIR}/CoMISo/Utils
#)
#gather_list_by_extension (comiso_Tcc "*T.cc" ${CoMISo_DIR})
#gather_list_by_extension (comiso_cc "*.cc" ${CoMISo_DIR})
#foreach (_ccfile ${comiso_cc})
#			get_filename_component (_filename ${_ccfile} NAME)
#			# message(STATUS "file " ${_filename})
#			if (_filename MATCHES "\\T.cc$$")
#				# message(STATUS "removed")
#				list (REMOVE_ITEM comiso_cc ${_ccfile})
#			endif ()
#endforeach ()
#gather_list_by_extension (comiso_hh "*.hh" ${CoMISo_DIR})
#include_directories(${CMAKE_SOURCE_DIR})
#add_definitions(-DINCLUDE_TEMPLATES) # Tell CoMISo to include *T.hpp into *.h


##############################################################################
# Application specific preprocessor definitions
##############################################################################

#INCLUDE_DIRECTORIES(Entrance Constructor MeshStructure SparseSolver ANN CoMISo NURBS Analysis ConstructInclude Wap MeshIO)
#ADD_EXECUTABLE(TSPND ${all_files} ${comiso_cc} ${comiso_hh})
#target_link_libraries(TSPND ${SuiteSparse_LIBS} ${GoTools_LIBS} ${Boost_LIBRARIES} ${Matlab_LIBS} )


#INSTALL(TARGETS kd_tree
#LIBRARY DESTINATION lib
#RUNTIME DESTINATION bin
#ARCHIVE DESTINATION lib)
#INSTALL(FILES ${project_h} DESTINATION include/kd_tree)

