# add our path and macros to cmake module path
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
include (Common)

##############################################################################
# Complier Setting
##############################################################################
# only use C++11 and higher compiler
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++1y" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y")
#elseif(COMPILER_SUPPORTS_CXX0X)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11  \
		support. Please use a different C++ compiler.")
ENDIF()
# more cxx flags
option(no_warning_for_no_symbols ON)
# for unix
IF(UNIX)
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-write-strings")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format-extra-args")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wformat=2")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ltcmalloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-malloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-calloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-realloc")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-free")
ENDIF(UNIX)
# Turn off warnings
IF(WIN32)
add_definitions(-wd4018 -wd4267 -wd4101)
add_definitions(-wd4190 -wd4244 -wd4305 -wd4099)
ENDIF(WIN32)
# in case cmake cannot detact that it's a CXX project
#set_target_properties(project_name PROPERTIES LINKER_LANGUAGE CXX)

##############################################################################
# External libraries
##############################################################################

##############################################################################
# Boost
##############################################################################
SET(Boost_ADDITIONAL_VERSIONS "1.58" )
FIND_PACKAGE(Boost)
IF(NOT Boost_FOUND)
	message (FATAL_ERROR "-- Boost not found.")
ENDIF()
include_directories(${Boost_INCLUDE_DIRS})
include_directories(${Boost_INCLUDE_LIB_DIRS})
#basic definitions
add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})

##############################################################################
# Cereal
##############################################################################
find_package(Cereal)
if(Cereal_FOUND)
	message("-- Found Cereal at ${Cereal_INCLUDE_DIR}")
	include_directories(${Cereal_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Cereal")
ENDIF()

##############################################################################
# Eigen
##############################################################################
#find_package (Eigen3 REQUIRED 3.0.0)
#IF(NOT EIGEN3_INCLUDE_DIR)
#  message (FATAL_ERROR "Eigen3 not found!")
#ENDIF ()
#include_directories(${EIGEN3_INCLUDE_DIR})
#add_definitions(${EIGEN3_DEFINITIONS})

##############################################################################
# Google test: gtest and gmock (only gtest is used here)
##############################################################################
find_package(GoogleTest)
if(GTest_FOUND)
#	message("-- Found Gtest at ${Gtest_INCLUDE_DIR}")
	include_directories(${Gtest_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Gtest")
ENDIF()

##############################################################################
# Mlpack
##############################################################################
find_package(Mlpack)
if(Mlpack_FOUND)
#	message("-- Found Mlpack at ${Mlpack_INCLUDE_DIR}")
	include_directories(${Mlpack_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Mlpack")
ENDIF()

##############################################################################
# Mysql
##############################################################################
find_package(Mysql)
if(MySQL_FOUND)
#	message("-- Found mysql at ${MySQL_INCLUDE_DIR}")
	include_directories(${MySQL_INCLUDE_DIR})
ELSE()
	set (MySQL_NOTFOUND 1)
ENDIF()

##############################################################################
# Nanomsg
##############################################################################
find_package(Nanomsg)
if(Nanomsg_FOUND)
#	message("-- Found Nanomsg at ${Nanomsg_INCLUDE_DIR}")
	include_directories(${Nanomsg_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Nanomsg")
ENDIF()

##############################################################################
# OpenMP
##############################################################################
# disable openmp if using with intel mkl_rt.lib.
# if linking to four mkl layer libs, then openmp is ok.
find_package(OpenMP)
IF(OPENMP_FOUND)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	add_definitions(-DUSE_OPENMP)
ELSE()
	set (OPENMP_NOTFOUND 1)
ENDIF()

##############################################################################
# Python
##############################################################################
find_package(PythonLibs)
IF(PYTHONLIBS_FOUND)
	include_directories(${PYTHON_INCLUDE_DIRS})
ELSE()
	set (PYTHONLIBS_NOTFOUND 1)
ENDIF()

##############################################################################
# Rapidjson
##############################################################################
find_package(Rapidjson)
if(Rapidjson_FOUND)
#	message("-- Found Rapidjson at ${Rapidjson_INCLUDE_DIR}")
	include_directories(${Rapidjson_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Rapidjson")
ENDIF()

##############################################################################
# R Rcpp
##############################################################################
find_package(R)
if(R_LIBRARIES)
#	message("-- Found R at ${Rcpp_INCLUDE_DIR}")
	include_directories(${R_INCLUDE_DIR})
ELSE()
	message("-- Cannot find R")
ENDIF()

find_package(Rcpp)
if(Rcpp_FOUND)
#	message("-- Found Rcpp at ${Rcpp_INCLUDE_DIR}")
	include_directories(${Rcpp_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Rcpp")
ENDIF()

##############################################################################
# Seasocks
##############################################################################
find_package(Seasocks)
if(Seasocks_FOUND)
#	message("-- Found Seasocks at ${Seasocks_INCLUDE_DIR}")
	include_directories(${Seasocks_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Seasocks")
ENDIF()

##############################################################################
# SuiteSparse
##############################################################################
#find_package (SuiteSparse)
#IF(NOT SuiteSparse_FOUND )
#  message (FATAL_ERROR "SuiteSparse not found!")
#ENDIF ()
#include_directories(${SuiteSparse_INCLUDE_DIR})

##############################################################################
# Ta-Lib
##############################################################################
find_package(TaLib)
if(TaLib_FOUND)
#	message("-- Found TaLib at ${TaLib_INCLUDE_DIR}")
	include_directories(${TaLib_INCLUDE_DIR})
ELSE()
	message("-- Cannot find TaLib")
ENDIF()

##############################################################################
# Tcmalloc
##############################################################################
find_package(Tcmalloc)
if(Tcmalloc_FOUND)
#	message("-- Found Tcmalloc at ${Tcmalloc_INCLUDE_DIR}")
	include_directories(${Tcmalloc_INCLUDE_DIR})
ELSE()
	message("-- Cannot find Tcmalloc")
ENDIF()

##############################################################################
# YamlCpp
##############################################################################
find_package(YamlCpp)
if(YamlCpp_FOUND)
#	message("-- Found YamlCpp at ${YamlCpp_INCLUDE_DIR}")
	include_directories(${YamlCpp_INCLUDE_DIR})
ELSE()
	message("-- Cannot find YamlCpp")
ENDIF()
